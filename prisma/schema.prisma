// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

// Custom Models for Multi-tenant SaaS
enum UserRole {
  SUPER_ADMIN     // SaaS platform owner - sees all businesses, analytics, subscriptions
  BUSINESS_OWNER  // Photographers who purchase the tool - manage workspaces/clients and assign staff
  STAFF           // Staff/employees of business owners - limited access to only assigned workspaces  
  USER            // End customers - view/select photos in their workspace
}

enum WorkspaceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  color         String    @default("#3B82F6")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth Relations
  accounts Account[]
  sessions Session[]

  // Multi-tenant Relations
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  // Photo Relations
  uploadedPhotos Photo[]         @relation("PhotoUploader")
  selections     PhotoSelection[]
  
  // Invitation Relations
  createdInvitations Invitation[] @relation("InvitationCreator")
  acceptedInvitations Invitation[] @relation("InvitationAcceptor")
  
  // Subscription Relations
  subscription Subscription?

  @@map("User")
}

model Workspace {
  id          String          @id @default(cuid())
  name        String
  slug        String          @unique
  description String?
  status      WorkspaceStatus @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  users  User[]
  photos Photo[]
  invitations Invitation[]

  @@map("Workspace")
}

model Photo {
  id           Int      @id @default(autoincrement())
  filename     String
  originalName String
  url          String
  mimeType     String
  size         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Multi-tenant Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  uploadedById String
  uploadedBy   User   @relation("PhotoUploader", fields: [uploadedById], references: [id])

  // Photo Relations
  selections PhotoSelection[]

  @@map("Photo")
}

model PhotoSelection {
  id        String   @id @default(cuid())
  photoId   Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure a user can only select a photo once
  @@unique([photoId, userId])
  @@map("PhotoSelection")
}

// Secure Invitation System
enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

model Invitation {
  id          String           @id @default(cuid())
  token       String           @unique // Secure random token
  email       String
  role        UserRole
  workspaceId String?
  status      InvitationStatus @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Who created this invitation
  invitedById String
  invitedBy   User @relation("InvitationCreator", fields: [invitedById], references: [id])
  
  // Optional workspace assignment
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  
  // Track acceptance
  acceptedAt  DateTime?
  acceptedById String?
  acceptedBy  User? @relation("InvitationAcceptor", fields: [acceptedById], references: [id])
  
  @@map("Invitation")
}

// Subscription Management
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum PlanType {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

model Subscription {
  id                    String             @id @default(cuid())
  stripeSubscriptionId  String?            @unique // Null for development mode
  stripeCustomerId      String?            // Null for development mode
  stripePriceId         String?            // Null for development mode
  
  // Plan details
  planType              PlanType
  status                SubscriptionStatus @default(TRIALING)
  
  // Billing cycle
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean           @default(false)
  
  // Development mode support
  isDevelopmentMode     Boolean           @default(false)
  
  // Timestamps
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Relations
  userId                String            @unique
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("Subscription")
}
